/// TIMWIN: Segment 29
const ARCTAN_LOOKUP: [u16; 512] = [
     0,   1,   2,   3,   5,   6,   7,   8,  10,  11,  12,  14,  15,  16,  17,  19,
    20,  21,  22,  24,  25,  26,  27,  29,  30,  31,  33,  34,  35,  36,  38,  39,
    40,  41,  43,  44,  45,  47,  48,  49,  50,  52,  53,  54,  55,  57,  58,  59,
    60,  62,  63,  64,  65,  67,  68,  69,  71,  72,  73,  74,  76,  77,  78,  79,
    81,  82,  83,  84,  86,  87,  88,  89,  91,  92,  93,  94,  96,  97,  98,  99,
   101, 102, 103, 104, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119,
   120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139,
   140, 141, 142, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158,
   159, 160, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177,
   178, 179, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 195, 196,
   197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214,
   215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232,
   233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250,
   251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
   268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284,
   285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301,
   302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317,
   318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333,
   334, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
   349, 350, 351, 352, 353, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363,
   364, 365, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 375, 376, 377,
   378, 379, 380, 381, 382, 383, 383, 384, 385, 386, 387, 388, 389, 390, 390, 391,
   392, 393, 394, 395, 396, 396, 397, 398, 399, 400, 401, 402, 402, 403, 404, 405,
   406, 407, 407, 408, 409, 410, 411, 412, 412, 413, 414, 415, 416, 417, 417, 418,
   419, 420, 421, 421, 422, 423, 424, 425, 425, 426, 427, 428, 429, 429, 430, 431,
   432, 433, 433, 434, 435, 436, 437, 437, 438, 439, 440, 440, 441, 442, 443, 444,
   444, 445, 446, 447, 447, 448, 449, 450, 450, 451, 452, 453, 453, 454, 455, 456,
   456, 457, 458, 459, 459, 460, 461, 462, 462, 463, 464, 464, 465, 466, 467, 467,
   468, 469, 470, 470, 471, 472, 472, 473, 474, 475, 475, 476, 477, 477, 478, 479,
   479, 480, 481, 482, 482, 483, 484, 484, 485, 486, 486, 487, 488, 488, 489, 490,
   490, 491, 492, 493, 493, 494, 495, 495, 496, 497, 497, 498, 499, 499, 500, 500,
   501, 502, 502, 503, 504, 504, 505, 506, 506, 507, 508, 508, 509, 510, 510, 511,
];

/// TIMWIN: 10c8:1943
const COSINE_LOOKUP: [i16; 2049] = [
    16384,  16383,  16383,  16383,  16383,  16383,  16383,  16383,  16382,  16382,  16382,  16381,  16381,  16380,  16380,  16379,
    16379,  16378,  16377,  16377,  16376,  16375,  16374,  16373,  16372,  16371,  16370,  16369,  16368,  16367,  16366,  16365,
    16364,  16363,  16361,  16360,  16359,  16357,  16356,  16354,  16353,  16351,  16350,  16348,  16346,  16344,  16343,  16341,
    16339,  16337,  16335,  16333,  16331,  16329,  16327,  16325,  16323,  16321,  16319,  16316,  16314,  16312,  16309,  16307,
    16305,  16302,  16300,  16297,  16294,  16292,  16289,  16286,  16284,  16281,  16278,  16275,  16272,  16269,  16266,  16263,
    16260,  16257,  16254,  16251,  16248,  16244,  16241,  16238,  16234,  16231,  16228,  16224,  16221,  16217,  16213,  16210,
    16206,  16202,  16199,  16195,  16191,  16187,  16183,  16179,  16175,  16171,  16167,  16163,  16159,  16155,  16151,  16147,
    16142,  16138,  16134,  16129,  16125,  16120,  16116,  16111,  16107,  16102,  16097,  16093,  16088,  16083,  16078,  16074,
    16069,  16064,  16059,  16054,  16049,  16044,  16039,  16033,  16028,  16023,  16018,  16012,  16007,  16002,  15996,  15991,
    15985,  15980,  15974,  15969,  15963,  15957,  15952,  15946,  15940,  15934,  15928,  15923,  15917,  15911,  15905,  15899,
    15892,  15886,  15880,  15874,  15868,  15861,  15855,  15849,  15842,  15836,  15830,  15823,  15817,  15810,  15803,  15797,
    15790,  15783,  15777,  15770,  15763,  15756,  15749,  15742,  15735,  15728,  15721,  15714,  15707,  15700,  15693,  15685,
    15678,  15671,  15663,  15656,  15649,  15641,  15634,  15626,  15618,  15611,  15603,  15596,  15588,  15580,  15572,  15564,
    15557,  15549,  15541,  15533,  15525,  15517,  15509,  15500,  15492,  15484,  15476,  15468,  15459,  15451,  15443,  15434,
    15426,  15417,  15409,  15400,  15392,  15383,  15374,  15366,  15357,  15348,  15339,  15330,  15322,  15313,  15304,  15295,
    15286,  15277,  15267,  15258,  15249,  15240,  15231,  15221,  15212,  15203,  15193,  15184,  15175,  15165,  15156,  15146,
    15136,  15127,  15117,  15107,  15098,  15088,  15078,  15068,  15058,  15048,  15038,  15028,  15018,  15008,  14998,  14988,
    14978,  14968,  14957,  14947,  14937,  14927,  14916,  14906,  14895,  14885,  14874,  14864,  14853,  14843,  14832,  14821,
    14810,  14800,  14789,  14778,  14767,  14756,  14745,  14734,  14723,  14712,  14701,  14690,  14679,  14668,  14657,  14645,
    14634,  14623,  14611,  14600,  14589,  14577,  14566,  14554,  14543,  14531,  14519,  14508,  14496,  14484,  14473,  14461,
    14449,  14437,  14425,  14413,  14401,  14389,  14377,  14365,  14353,  14341,  14329,  14317,  14304,  14292,  14280,  14267,
    14255,  14243,  14230,  14218,  14205,  14193,  14180,  14167,  14155,  14142,  14129,  14117,  14104,  14091,  14078,  14065,
    14053,  14040,  14027,  14014,  14001,  13988,  13974,  13961,  13948,  13935,  13922,  13908,  13895,  13882,  13868,  13855,
    13842,  13828,  13815,  13801,  13788,  13774,  13760,  13747,  13733,  13719,  13705,  13692,  13678,  13664,  13650,  13636,
    13622,  13608,  13594,  13580,  13566,  13552,  13538,  13524,  13510,  13495,  13481,  13467,  13452,  13438,  13424,  13409,
    13395,  13380,  13366,  13351,  13337,  13322,  13307,  13293,  13278,  13263,  13249,  13234,  13219,  13204,  13189,  13174,
    13159,  13144,  13129,  13114,  13099,  13084,  13069,  13054,  13038,  13023,  13008,  12993,  12977,  12962,  12947,  12931,
    12916,  12900,  12885,  12869,  12854,  12838,  12822,  12807,  12791,  12775,  12760,  12744,  12728,  12712,  12696,  12680,
    12665,  12649,  12633,  12617,  12600,  12584,  12568,  12552,  12536,  12520,  12504,  12487,  12471,  12455,  12438,  12422,
    12406,  12389,  12373,  12356,  12340,  12323,  12307,  12290,  12273,  12257,  12240,  12223,  12207,  12190,  12173,  12156,
    12139,  12122,  12105,  12088,  12072,  12054,  12037,  12020,  12003,  11986,  11969,  11952,  11935,  11917,  11900,  11883,
    11866,  11848,  11831,  11813,  11796,  11779,  11761,  11744,  11726,  11708,  11691,  11673,  11656,  11638,  11620,  11602,
    11585,  11567,  11549,  11531,  11513,  11496,  11478,  11460,  11442,  11424,  11406,  11388,  11370,  11351,  11333,  11315,
    11297,  11279,  11260,  11242,  11224,  11206,  11187,  11169,  11150,  11132,  11114,  11095,  11077,  11058,  11040,  11021,
    11002,  10984,  10965,  10946,  10928,  10909,  10890,  10871,  10853,  10834,  10815,  10796,  10777,  10758,  10739,  10720,
    10701,  10682,  10663,  10644,  10625,  10606,  10586,  10567,  10548,  10529,  10510,  10490,  10471,  10452,  10432,  10413,
    10393,  10374,  10354,  10335,  10315,  10296,  10276,  10257,  10237,  10218,  10198,  10178,  10159,  10139,  10119,  10099,
    10079,  10060,  10040,  10020,  10000,   9980,   9960,   9940,   9920,   9900,   9880,   9860,   9840,   9820,   9800,   9780,
     9759,   9739,   9719,   9699,   9679,   9658,   9638,   9618,   9597,   9577,   9556,   9536,   9516,   9495,   9475,   9454,
     9434,   9413,   9392,   9372,   9351,   9331,   9310,   9289,   9268,   9248,   9227,   9206,   9185,   9165,   9144,   9123,
     9102,   9081,   9060,   9039,   9018,   8997,   8976,   8955,   8934,   8913,   8892,   8871,   8850,   8829,   8807,   8786,
     8765,   8744,   8722,   8701,   8680,   8658,   8637,   8616,   8594,   8573,   8552,   8530,   8509,   8487,   8466,   8444,
     8423,   8401,   8379,   8358,   8336,   8315,   8293,   8271,   8249,   8228,   8206,   8184,   8162,   8141,   8119,   8097,
     8075,   8053,   8031,   8009,   7988,   7966,   7944,   7922,   7900,   7878,   7856,   7833,   7811,   7789,   7767,   7745,
     7723,   7701,   7678,   7656,   7634,   7612,   7590,   7567,   7545,   7523,   7500,   7478,   7456,   7433,   7411,   7388,
     7366,   7343,   7321,   7299,   7276,   7253,   7231,   7208,   7186,   7163,   7141,   7118,   7095,   7073,   7050,   7027,
     7005,   6982,   6959,   6936,   6914,   6891,   6868,   6845,   6822,   6799,   6777,   6754,   6731,   6708,   6685,   6662,
     6639,   6616,   6593,   6570,   6547,   6524,   6501,   6478,   6455,   6432,   6408,   6385,   6362,   6339,   6316,   6293,
     6269,   6246,   6223,   6200,   6176,   6153,   6130,   6106,   6083,   6060,   6036,   6013,   5990,   5966,   5943,   5919,
     5896,   5873,   5849,   5826,   5802,   5779,   5755,   5732,   5708,   5684,   5661,   5637,   5614,   5590,   5566,   5543,
     5519,   5495,   5472,   5448,   5424,   5401,   5377,   5353,   5329,   5306,   5282,   5258,   5234,   5210,   5187,   5163,
     5139,   5115,   5091,   5067,   5043,   5019,   4995,   4972,   4948,   4924,   4900,   4876,   4852,   4828,   4804,   4780,
     4756,   4731,   4707,   4683,   4659,   4635,   4611,   4587,   4563,   4539,   4514,   4490,   4466,   4442,   4418,   4394,
     4369,   4345,   4321,   4297,   4272,   4248,   4224,   4200,   4175,   4151,   4127,   4102,   4078,   4054,   4029,   4005,
     3980,   3956,   3932,   3907,   3883,   3858,   3834,   3810,   3785,   3761,   3736,   3712,   3687,   3663,   3638,   3614,
     3589,   3565,   3540,   3516,   3491,   3467,   3442,   3417,   3393,   3368,   3344,   3319,   3294,   3270,   3245,   3221,
     3196,   3171,   3147,   3122,   3097,   3073,   3048,   3023,   2998,   2974,   2949,   2924,   2900,   2875,   2850,   2825,
     2801,   2776,   2751,   2726,   2701,   2677,   2652,   2627,   2602,   2577,   2553,   2528,   2503,   2478,   2453,   2428,
     2404,   2379,   2354,   2329,   2304,   2279,   2254,   2229,   2204,   2180,   2155,   2130,   2105,   2080,   2055,   2030,
     2005,   1980,   1955,   1930,   1905,   1880,   1855,   1830,   1805,   1780,   1755,   1730,   1705,   1680,   1655,   1630,
     1605,   1580,   1555,   1530,   1505,   1480,   1455,   1430,   1405,   1380,   1355,   1330,   1305,   1280,   1255,   1230,
     1205,   1180,   1155,   1130,   1105,   1079,   1054,   1029,   1004,    979,    954,    929,    904,    879,    854,    829,
      803,    778,    753,    728,    703,    678,    653,    628,    603,    577,    552,    527,    502,    477,    452,    427,
      402,    376,    351,    326,    301,    276,    251,    226,    201,    175,    150,    125,    100,     75,     50,     25,
        0,    -26,    -51,    -76,   -101,   -126,   -151,   -176,   -202,   -227,   -252,   -277,   -302,   -327,   -352,   -377,
     -403,   -428,   -453,   -478,   -503,   -528,   -553,   -578,   -604,   -629,   -654,   -679,   -704,   -729,   -754,   -779,
     -804,   -830,   -855,   -880,   -905,   -930,   -955,   -980,  -1005,  -1030,  -1055,  -1080,  -1106,  -1131,  -1156,  -1181,
    -1206,  -1231,  -1256,  -1281,  -1306,  -1331,  -1356,  -1381,  -1406,  -1431,  -1456,  -1481,  -1506,  -1531,  -1556,  -1581,
    -1606,  -1631,  -1656,  -1681,  -1706,  -1731,  -1756,  -1781,  -1806,  -1831,  -1856,  -1881,  -1906,  -1931,  -1956,  -1981,
    -2006,  -2031,  -2056,  -2081,  -2106,  -2131,  -2156,  -2181,  -2205,  -2230,  -2255,  -2280,  -2305,  -2330,  -2355,  -2380,
    -2405,  -2429,  -2454,  -2479,  -2504,  -2529,  -2554,  -2578,  -2603,  -2628,  -2653,  -2678,  -2702,  -2727,  -2752,  -2777,
    -2802,  -2826,  -2851,  -2876,  -2901,  -2925,  -2950,  -2975,  -2999,  -3024,  -3049,  -3074,  -3098,  -3123,  -3148,  -3172,
    -3197,  -3222,  -3246,  -3271,  -3295,  -3320,  -3345,  -3369,  -3394,  -3418,  -3443,  -3468,  -3492,  -3517,  -3541,  -3566,
    -3590,  -3615,  -3639,  -3664,  -3688,  -3713,  -3737,  -3762,  -3786,  -3811,  -3835,  -3859,  -3884,  -3908,  -3933,  -3957,
    -3981,  -4006,  -4030,  -4055,  -4079,  -4103,  -4128,  -4152,  -4176,  -4201,  -4225,  -4249,  -4273,  -4298,  -4322,  -4346,
    -4370,  -4395,  -4419,  -4443,  -4467,  -4491,  -4515,  -4540,  -4564,  -4588,  -4612,  -4636,  -4660,  -4684,  -4708,  -4732,
    -4757,  -4781,  -4805,  -4829,  -4853,  -4877,  -4901,  -4925,  -4949,  -4973,  -4996,  -5020,  -5044,  -5068,  -5092,  -5116,
    -5140,  -5164,  -5188,  -5211,  -5235,  -5259,  -5283,  -5307,  -5330,  -5354,  -5378,  -5402,  -5425,  -5449,  -5473,  -5496,
    -5520,  -5544,  -5567,  -5591,  -5615,  -5638,  -5662,  -5685,  -5709,  -5733,  -5756,  -5780,  -5803,  -5827,  -5850,  -5874,
    -5897,  -5920,  -5944,  -5967,  -5991,  -6014,  -6037,  -6061,  -6084,  -6107,  -6131,  -6154,  -6177,  -6201,  -6224,  -6247,
    -6270,  -6294,  -6317,  -6340,  -6363,  -6386,  -6409,  -6433,  -6456,  -6479,  -6502,  -6525,  -6548,  -6571,  -6594,  -6617,
    -6640,  -6663,  -6686,  -6709,  -6732,  -6755,  -6778,  -6800,  -6823,  -6846,  -6869,  -6892,  -6915,  -6937,  -6960,  -6983,
    -7006,  -7028,  -7051,  -7074,  -7096,  -7119,  -7142,  -7164,  -7187,  -7209,  -7232,  -7254,  -7277,  -7300,  -7322,  -7344,
    -7367,  -7389,  -7412,  -7434,  -7457,  -7479,  -7501,  -7524,  -7546,  -7568,  -7591,  -7613,  -7635,  -7657,  -7679,  -7702,
    -7724,  -7746,  -7768,  -7790,  -7812,  -7834,  -7857,  -7879,  -7901,  -7923,  -7945,  -7967,  -7989,  -8010,  -8032,  -8054,
    -8076,  -8098,  -8120,  -8142,  -8163,  -8185,  -8207,  -8229,  -8250,  -8272,  -8294,  -8316,  -8337,  -8359,  -8380,  -8402,
    -8424,  -8445,  -8467,  -8488,  -8510,  -8531,  -8553,  -8574,  -8595,  -8617,  -8638,  -8659,  -8681,  -8702,  -8723,  -8745,
    -8766,  -8787,  -8808,  -8830,  -8851,  -8872,  -8893,  -8914,  -8935,  -8956,  -8977,  -8998,  -9019,  -9040,  -9061,  -9082,
    -9103,  -9124,  -9145,  -9166,  -9186,  -9207,  -9228,  -9249,  -9269,  -9290,  -9311,  -9332,  -9352,  -9373,  -9393,  -9414,
    -9435,  -9455,  -9476,  -9496,  -9517,  -9537,  -9557,  -9578,  -9598,  -9619,  -9639,  -9659,  -9680,  -9700,  -9720,  -9740,
    -9760,  -9781,  -9801,  -9821,  -9841,  -9861,  -9881,  -9901,  -9921,  -9941,  -9961,  -9981, -10001, -10021, -10041, -10061,
   -10080, -10100, -10120, -10140, -10160, -10179, -10199, -10219, -10238, -10258, -10277, -10297, -10316, -10336, -10355, -10375,
   -10394, -10414, -10433, -10453, -10472, -10491, -10511, -10530, -10549, -10568, -10587, -10607, -10626, -10645, -10664, -10683,
   -10702, -10721, -10740, -10759, -10778, -10797, -10816, -10835, -10854, -10872, -10891, -10910, -10929, -10947, -10966, -10985,
   -11003, -11022, -11041, -11059, -11078, -11096, -11115, -11133, -11151, -11170, -11188, -11207, -11225, -11243, -11261, -11280,
   -11298, -11316, -11334, -11352, -11371, -11389, -11407, -11425, -11443, -11461, -11479, -11497, -11514, -11532, -11550, -11568,
   -11586, -11603, -11621, -11639, -11657, -11674, -11692, -11709, -11727, -11745, -11762, -11780, -11797, -11814, -11832, -11849,
   -11867, -11884, -11901, -11918, -11936, -11953, -11970, -11987, -12004, -12021, -12038, -12055, -12073, -12089, -12106, -12123,
   -12140, -12157, -12174, -12191, -12208, -12224, -12241, -12258, -12274, -12291, -12308, -12324, -12341, -12357, -12374, -12390,
   -12407, -12423, -12439, -12456, -12472, -12488, -12505, -12521, -12537, -12553, -12569, -12585, -12601, -12618, -12634, -12650,
   -12666, -12681, -12697, -12713, -12729, -12745, -12761, -12776, -12792, -12808, -12823, -12839, -12855, -12870, -12886, -12901,
   -12917, -12932, -12948, -12963, -12978, -12994, -13009, -13024, -13039, -13055, -13070, -13085, -13100, -13115, -13130, -13145,
   -13160, -13175, -13190, -13205, -13220, -13235, -13250, -13264, -13279, -13294, -13308, -13323, -13338, -13352, -13367, -13381,
   -13396, -13410, -13425, -13439, -13453, -13468, -13482, -13496, -13511, -13525, -13539, -13553, -13567, -13581, -13595, -13609,
   -13623, -13637, -13651, -13665, -13679, -13693, -13706, -13720, -13734, -13748, -13761, -13775, -13789, -13802, -13816, -13829,
   -13843, -13856, -13869, -13883, -13896, -13909, -13923, -13936, -13949, -13962, -13975, -13989, -14002, -14015, -14028, -14041,
   -14054, -14066, -14079, -14092, -14105, -14118, -14130, -14143, -14156, -14168, -14181, -14194, -14206, -14219, -14231, -14244,
   -14256, -14268, -14281, -14293, -14305, -14318, -14330, -14342, -14354, -14366, -14378, -14390, -14402, -14414, -14426, -14438,
   -14450, -14462, -14474, -14485, -14497, -14509, -14520, -14532, -14544, -14555, -14567, -14578, -14590, -14601, -14612, -14624,
   -14635, -14646, -14658, -14669, -14680, -14691, -14702, -14713, -14724, -14735, -14746, -14757, -14768, -14779, -14790, -14801,
   -14811, -14822, -14833, -14844, -14854, -14865, -14875, -14886, -14896, -14907, -14917, -14928, -14938, -14948, -14958, -14969,
   -14979, -14989, -14999, -15009, -15019, -15029, -15039, -15049, -15059, -15069, -15079, -15089, -15099, -15108, -15118, -15128,
   -15137, -15147, -15157, -15166, -15176, -15185, -15194, -15204, -15213, -15222, -15232, -15241, -15250, -15259, -15268, -15278,
   -15287, -15296, -15305, -15314, -15323, -15331, -15340, -15349, -15358, -15367, -15375, -15384, -15393, -15401, -15410, -15418,
   -15427, -15435, -15444, -15452, -15460, -15469, -15477, -15485, -15493, -15501, -15510, -15518, -15526, -15534, -15542, -15550,
   -15558, -15565, -15573, -15581, -15589, -15597, -15604, -15612, -15619, -15627, -15635, -15642, -15650, -15657, -15664, -15672,
   -15679, -15686, -15694, -15701, -15708, -15715, -15722, -15729, -15736, -15743, -15750, -15757, -15764, -15771, -15778, -15784,
   -15791, -15798, -15804, -15811, -15818, -15824, -15831, -15837, -15843, -15850, -15856, -15862, -15869, -15875, -15881, -15887,
   -15893, -15900, -15906, -15912, -15918, -15924, -15929, -15935, -15941, -15947, -15953, -15958, -15964, -15970, -15975, -15981,
   -15986, -15992, -15997, -16003, -16008, -16013, -16019, -16024, -16029, -16034, -16040, -16045, -16050, -16055, -16060, -16065,
   -16070, -16075, -16079, -16084, -16089, -16094, -16098, -16103, -16108, -16112, -16117, -16121, -16126, -16130, -16135, -16139,
   -16143, -16148, -16152, -16156, -16160, -16164, -16168, -16172, -16176, -16180, -16184, -16188, -16192, -16196, -16200, -16203,
   -16207, -16211, -16214, -16218, -16222, -16225, -16229, -16232, -16235, -16239, -16242, -16245, -16249, -16252, -16255, -16258,
   -16261, -16264, -16267, -16270, -16273, -16276, -16279, -16282, -16285, -16287, -16290, -16293, -16295, -16298, -16301, -16303,
   -16306, -16308, -16310, -16313, -16315, -16317, -16320, -16322, -16324, -16326, -16328, -16330, -16332, -16334, -16336, -16338,
   -16340, -16342, -16344, -16345, -16347, -16349, -16351, -16352, -16354, -16355, -16357, -16358, -16360, -16361, -16362, -16364,
   -16365, -16366, -16367, -16368, -16369, -16370, -16371, -16372, -16373, -16374, -16375, -16376, -16377, -16378, -16378, -16379,
   -16380, -16380, -16381, -16381, -16382, -16382, -16383, -16383, -16383, -16384, -16384, -16384, -16384, -16384, -16384, -16384,
   -16384
];


/// TIMWIN: 1040:1442
/// 
/// Get the arc tangent of the coordinates.
/// Returns an angle from 0 to 65535 inclusive. Angles are clockwise.
/// Down  (0, +) returns 0.
/// Left  (-, 0) returns 0x4000 (25% of 65536)
/// Up    (0, -) returns 0x8000 (50% of 65536)
/// Right (+, 0) returns 0xC000 (75% of 65536)
/// 
/// dx and dy range from -0x400000 to +0x3FFFFF (-4,194,304 to 4,194,303)
/// 
/// Returns 4096 possible angles. (approx 11.3 divisions per degree)
pub fn arctan(dx: i32, dy: i32) -> u16 {
    let negx = dx < 0;
    let negy = dy < 0;
    let dx = dx.abs();
    let dy = dy.abs();

    let mut val: u16 = unsafe {
        if dx == 0 {
            0x0400
        } else if dy == 0 {
            0
        } else if dx == dy {
            0x0200
        } else if dx < dy {
            0x0400 - ARCTAN_LOOKUP.get_unchecked(((dx * 512) / dy) as usize)
        } else {
            *ARCTAN_LOOKUP.get_unchecked(((dy * 512) / dx) as usize)
        }
    };

    if negx {
        val = (0x0800 as u16).wrapping_sub(val);
    }
    if negy {
        val = (0x1000 as u16).wrapping_sub(val);
    }

    val.wrapping_sub(0x400).wrapping_mul(16)
}

/// TIMWIN: 10c8:2946
/// Returns value from -0x4000 to +0x4000 inclusive.
pub extern fn sine(angle: u16) -> i16 {
    let mut angle = angle.wrapping_add(0xC000) / 16;

    if (angle & 0x0800) != 0 {
        // make angle less than 0x0800.
        angle = 0x1000 - angle;
    }
    // "angle" is one of 2049 possible values (0x000 to 0x800 inclusive)
    COSINE_LOOKUP[angle as usize]
}

/// TIMWIN: 10c8:296e
/// Returns value from -0x4000 to +0x4000 inclusive.
pub fn cosine(angle: u16) -> i16 {
    let mut angle = angle / 16;

    if (angle & 0x0800) != 0 {
        // make angle less than 0x0800.
        angle = 0x1000 - angle;
    }
    // "angle" is one of 2049 possible values (0x000 to 0x800 inclusive)
    COSINE_LOOKUP[angle as usize]
}
/// TIMWIN: 10a8:0000
/// Modifies x and y by rotating it around 0,0. Rotates clockwise.
pub fn rotate_point(x: i16, y: i16, angle: u16) -> (i16, i16) {
    let x = x as i32;
    let y = y as i32;
    let c = cosine(angle) as i32;
    let s = sine(angle) as i32;

    (((x*c - y*s) >> 0xe) as i16,
     ((x*s + y*c) >> 0xe) as i16)
}


/// TIMWIN: 10a8:02dc
#[inline(always)]
pub fn line_intersection_helper(a: i16, b: i16, c: i16) -> bool {
    let (b, c) = if b > c { (c, b) } else { (b, c) };
    // (smallest, largest)

    if a < b {
        false
    } else {
        (a - b) <= (c - b)
    }
}

/// TIMWIN: 10a8:00c1
/// Given two lines "a" and "b", calculate the point where the two lines cross.
///
/// Returns (true, (x, y)) if there's an intersection.
/// Returns (false, (x, y)) if there's no intersection. x and y are extrapolated (assuming the two lines are infinite length).
pub fn line_intersection(a: ((i16, i16), (i16, i16)),
                         b: ((i16, i16), (i16, i16))) -> (bool, (i16, i16)) {
    let a_dx = a.0.0 as i32 - a.1.0 as i32;
    let a_dy = a.0.1 as i32 - a.1.1 as i32;
    let b_dx = b.1.0 as i32 - b.0.0 as i32;
    let b_dy = b.1.1 as i32 - b.0.1 as i32;

    let ivar3 = a_dy*a.1.0 as i32 - a_dx*a.1.1 as i32;
    let ivar4 = b_dy*b.0.0 as i32 - b_dx*b.0.1 as i32;
    let ivar5 = b_dy*a_dx - b_dx*a_dy;

    let out: (i16, i16);
    if ivar5 != 0 {
        out = (((ivar4*a_dx - ivar3*b_dx) / ivar5) as i16,
               ((ivar4*a_dy - ivar3*b_dy) / ivar5) as i16);
    } else if b_dy*a.0.0 as i32 + b_dx*a.0.1 as i32 == 0 {
        out = a.1;
    } else {
        out = (0, 0);
    }

    let intersects = line_intersection_helper(out.0, a.0.0, a.1.0) &&
                     line_intersection_helper(out.0, b.0.0, b.1.0) &&
                     line_intersection_helper(out.1, a.0.1, a.1.1) &&
                     line_intersection_helper(out.1, b.0.1, b.1.1);

    (intersects, out)
}

#[cfg(test)]
mod line_intersection_tests {
    use super::line_intersection;

    #[test]
    fn plus1() {
        let r = line_intersection(((-64, 0), (64, 0)),
                                  ((0, -64), (0, 64)));
        assert_eq!(r, (true, (0, 0)));
    }
    #[test]
    fn plus2() {
        let r = line_intersection(((0, 64), (128, 64)),
                                  ((64, 0), (64, 128)));
        assert_eq!(r, (true, (64, 64)));
    }

    #[test]
    fn overlap_straight_horz() {
        let r = line_intersection(((64, 64), (128, 64)),
                                  ((64, 64), (128, 64)));
        assert_eq!(r, (false, (0, 0)));
    }

    #[test]
    fn overlap_straight_horz_subset() {
        let r = line_intersection(((64, 64), (128, 64)),
                                  ((65, 64), (127, 64)));
        assert_eq!(r, (false, (0, 0)));
    }

    #[test]
    fn overlap_straight_vert() {
        let r = line_intersection(((64, 64), (64, 128)),
                                  ((64, 64), (64, 128)));
        assert_eq!(r, (false, (0, 0)));
    }

    #[test]
    fn overlap_straight_vert_subset() {
        let r = line_intersection(((64, 64), (64, 128)),
                                  ((64, 65), (64, 127)));
        assert_eq!(r, (false, (0, 0)));
    }

    #[test]
    fn overlap_diag() {
        let r = line_intersection(((64, 64), (128, 128)),
                                  ((64, 64), (128, 128)));
        assert_eq!(r, (false, (0, 0)));
    }

    #[test]
    fn overlap_diag_subset() {
        let r = line_intersection(((64, 64), (128, 128)),
                                  ((65, 65), (127, 127)));
        assert_eq!(r, (false, (0, 0)));
    }

    #[test]
    fn two_lines_no_intersect() {
        let r = line_intersection(((10, 10), (100, 100)),
                                  ((250, 20), (150, 60)));
        assert_eq!(r, (false, (85, 85)));
    }

    #[test]
    fn two_lines_intersect() {
        let r = line_intersection(((20, -45), (52, 140)),
                                  ((250, 20), (-45, 54)));
        assert_eq!(r, (true, (35, 44)));
    }

    #[test]
    fn two_lines_intersect_one_horz_1() {
        let r = line_intersection(((20, -45), (52, 140)),
                                  ((210, 54), (-45, 54)));
        assert_eq!(r, (true, (37, 54)));
    }

    #[test]
    fn two_lines_intersect_one_horz_2() {
        let r = line_intersection(((210, 54), (-45, 54)),
                                  ((20, -45), (52, 140)));
        assert_eq!(r, (true, (37, 54)));
    }

    #[test]
    fn two_points() {
        let r = line_intersection(((1, 1), (1, 1)),
                                  ((5, 1), (5, 1)));
        assert_eq!(r, (false, (1, 1)));
    }

    #[test]
    fn two_points_same() {
        let r = line_intersection(((5, 1), (5, 1)),
                                  ((5, 1), (5, 1)));
        assert_eq!(r, (true, (5, 1)));
    }
}

#[cfg(test)]
mod arctan_tests {
    use super::arctan;

    /// Run each (x, y, expected) with 10,000 extrapolations from the origin.
    /// Should all return the same angle.
    macro_rules! run {
        ($t: expr) => {
            for i in 1..=10000 {
                for &(x, y, expected) in $t {
                    assert_eq!(((i, x, y), arctan(x*i, y*i)), ((i, x, y), expected));
                }
            }
        };
    }

    #[test]
    fn straight_and_diagonal() {
        run!(&[( 0,  1, 0x0000),
               (-1,  1, 0x2000),
               (-1,  0, 0x4000),
               (-1, -1, 0x6000),
               ( 0, -1, 0x8000),
               ( 1, -1, 0xA000),
               ( 1,  0, 0xC000),
               ( 1,  1, 0xE000)]);
    }

    #[test]
    fn slopes_1_2() {
        // Slopes are 1/2 from quadrants.
        // (function returns 0x12E0, or 26.543 degrees)
        run!(&[(-1,  2, 0x12E0),
               (-2,  1, 0x2D20),
               (-2, -1, 0x52E0),
               (-1, -2, 0x6D20),
               ( 1, -2, 0x92E0),
               ( 2, -1, 0xAD20),
               ( 2,  1, 0xD2E0),
               ( 1,  2, 0xED20)]);
    }

    #[test]
    fn slopes_1_10() {
        // Slopes are 1/10 from quadrants.
        // (function returns 0x0400, or 5.625 degrees)
        run!(&[(-1,  10, 0x0400),
               (-10,  1, 0x3C00),
               (-10, -1, 0x4400),
               (-1, -10, 0x7C00),
               ( 1, -10, 0x8400),
               ( 10, -1, 0xBC00),
               ( 10,  1, 0xC400),
               ( 1,  10, 0xFC00)]);
    }

    #[test]
    fn samples() {
        // arctan (ours) and atan2 (Rust) are both clockwise, but their "0" is different.
        // arctan(): x=0,y=1 (down) is 0 degrees
        // atan2():  x=1,y=0 (right) is 0 degrees
        //
        // Sample generation code:
        //
        // use rand;
        // for _ in 0..30 {
        //     let x = rand::random::<i16>();
        //     let y = rand::random::<i16>();
    
        //     let result = math::arctan(x as i32, y as i32);
    
        //     let mut r_result = f32::atan2(y as f32, x as f32) / (3.14159265*2.0) - 0.25;
        //     while r_result < 0.0 {
        //         r_result += 1.0;
        //     }
    
        //     r_result = (r_result*65536.0).round();
        //     let error = result as f32 - r_result;
    
        //     println!("assert_eq!(arctan({:6}, {:6}), {:6}); // Accurate: {:6.0} (error = {:+3.0}, {:+.02}%, {:+.2} deg)", x, y, result, r_result, error, error*100.0/r_result, error*360.0/65536.0);
        // }

        assert_eq!(arctan( 17767,   9158),  54096); // Accurate:  54116 (error = -20, -0.04%, -0.11 deg)
        assert_eq!(arctan(-26519,  18547),  10032); // Accurate:  10018 (error = +14, +0.14%, +0.08 deg)
        assert_eq!(arctan( -9135,  23807),   3808); // Accurate:   3822 (error = -14, -0.37%, -0.08 deg)
        assert_eq!(arctan(-27574,  22764),   9200); // Accurate:   9186 (error = +14, +0.15%, +0.08 deg)
        assert_eq!(arctan(  7977,  31949),  63008); // Accurate:  62984 (error = +24, +0.04%, +0.13 deg)
        assert_eq!(arctan( 22714, -10325),  44720); // Accurate:  44702 (error = +18, +0.04%, +0.10 deg)
        assert_eq!(arctan( 16882,   7931),  53712); // Accurate:  53733 (error = -21, -0.04%, -0.12 deg)
        assert_eq!(arctan(-22045,  -7866),  19936); // Accurate:  19959 (error = -23, -0.12%, -0.13 deg)
        assert_eq!(arctan(   124,  25282),  65504); // Accurate:  65485 (error = +19, +0.03%, +0.10 deg)
        assert_eq!(arctan(  2132,  10232),  63408); // Accurate:  63393 (error = +15, +0.02%, +0.08 deg)
        assert_eq!(arctan(  8987,  -5656),  43312); // Accurate:  43293 (error = +19, +0.04%, +0.10 deg)
        assert_eq!(arctan(-12825,  17293),   6640); // Accurate:   6656 (error = -16, -0.24%, -0.09 deg)
        assert_eq!(arctan(  3958,   9562),  61472); // Accurate:  61443 (error = +29, +0.05%, +0.16 deg)
        assert_eq!(arctan( -1746,  29283),    608); // Accurate:    621 (error = -13, -2.09%, -0.07 deg)
        assert_eq!(arctan(-15821, -10337),  22400); // Accurate:  22421 (error = -21, -0.09%, -0.12 deg)
        assert_eq!(arctan(-15159,   1946),  15072); // Accurate:  15052 (error = +20, +0.13%, +0.11 deg)
        assert_eq!(arctan( -1178,  23858),    496); // Accurate:    515 (error = -19, -3.69%, -0.10 deg)
        assert_eq!(arctan( 20493, -10313),  44304); // Accurate:  44289 (error = +15, +0.03%, +0.08 deg)
        assert_eq!(arctan(-17871,  -7080),  20288); // Accurate:  20318 (error = -30, -0.15%, -0.16 deg)
        assert_eq!(arctan( 12451,  -9894),  42160); // Accurate:  42148 (error = +12, +0.03%, +0.07 deg)
        assert_eq!(arctan( 24869, -30371),  39920); // Accurate:  39925 (error =  -5, -0.01%, -0.03 deg)
        assert_eq!(arctan(-20219, -23785),  25424); // Accurate:  25419 (error =  +5, +0.02%, +0.03 deg)
        assert_eq!(arctan(-22440,  23273),   7984); // Accurate:   8002 (error = -18, -0.22%, -0.10 deg)
        assert_eq!(arctan(-31650, -22316),  22784); // Accurate:  22790 (error =  -6, -0.03%, -0.03 deg)
        assert_eq!(arctan(-16981, -29518),  27344); // Accurate:  27323 (error = +21, +0.08%, +0.12 deg)
        assert_eq!(arctan(-12083,  -7994),  22464); // Accurate:  22480 (error = -16, -0.07%, -0.09 deg)
        assert_eq!(arctan( 30363, -24908),  42000); // Accurate:  41986 (error = +14, +0.03%, +0.08 deg)
        assert_eq!(arctan(  9300, -31215),  35776); // Accurate:  35788 (error = -12, -0.03%, -0.07 deg)
        assert_eq!(arctan(-15346,   7554),  11616); // Accurate:  11613 (error =  +3, +0.03%, +0.02 deg)
        assert_eq!(arctan( -1932, -31167),  32144); // Accurate:  32122 (error = +22, +0.07%, +0.12 deg)
    }
}

#[cfg(test)]
mod sine_tests {
    use super::sine;
    use super::cosine;
    use super::rotate_point;

    #[test]
    fn sine_cosine_equivalence() {
        for i in 0..=0xFFFFu16 {
            assert_eq!(sine(i.wrapping_add(0x4000)), cosine(i));
        }
    }

    #[test]
    fn sine_0_degrees() {
        assert_eq!(sine(0), 0);
    }

    #[test]
    fn sine_45_degrees() {
        // Note: 0x2D41/0x4000 = approx 0.7071
        assert_eq!(sine(0x2000), 0x2D41);
    }

    #[test]
    fn sine_90_degrees() {
        assert_eq!(sine(0x4000), 0x4000);
    }

    #[test]
    fn sine_180_degrees() {
        assert_eq!(sine(0x8000), 0);
    }

    #[test]
    fn sine_270_degrees() {
        assert_eq!(sine(0xC000), -0x4000);
    }

    #[test]
    fn cos_0_degrees() {
        assert_eq!(cosine(0), 0x4000);
    }

    #[test]
    fn rotate_points() {
        // 0 degrees
        assert_eq!(rotate_point(100, 100, 0x0000), (100, 100));
        // 45 degrees
        assert_eq!(rotate_point(100, 100, 0x2000), (0, 141));
        // 90
        assert_eq!(rotate_point(100, 100, 0x4000), (-100, 100));
        // 180
        assert_eq!(rotate_point(100, 100, 0x8000), (-100, -100));
        // 270
        assert_eq!(rotate_point(100, 100, 0xC000), (100, -100));
    }

    #[test]
    fn rotate_point_samples() {
        // Sample generation code:
        //
        // use rand;
        // for _ in 0..30 {
        //     let x = rand::random::<i16>();
        //     let y = rand::random::<i16>();
        //     let angle = rand::random::<u16>();
    
        //     let result = math::rotate_point(x, y, angle);
    
        //     println!("assert_eq!(rotate_point({:6}, {:6}, 0x{:04X}), ({:6}, {:6}));", x, y, angle, result.0, result.1);
        // }

        assert_eq!(rotate_point( 18483,   -243, 0x192E), ( 15218,  10490));
        assert_eq!(rotate_point(  7318,  20805, 0x18BB), ( -5834,  21268));
        assert_eq!(rotate_point( 23320,  22714, 0x2D8C), (-10184,  30918));
        assert_eq!(rotate_point(   -38,  -1342, 0xBA69), ( -1325,    222));
        assert_eq!(rotate_point(  8222,  -5629, 0x13D5), (  9898,  -1135));
        assert_eq!(rotate_point( 15084,  17635, 0xF1B6), ( 20230,  11366));
        assert_eq!(rotate_point(-12417, -14560, 0xE1F6), (-18982,  -2420));
        assert_eq!(rotate_point(-19571,  -5157, 0x16CB), (-13866, -14742));
        assert_eq!(rotate_point(-20747, -30402, 0xB485), (-23421,  28395));
        assert_eq!(rotate_point( 27938,  -9953, 0x656E), (-16133,  24886));
        assert_eq!(rotate_point( 19395, -28834, 0x88BA), (-25060,  24075));
        assert_eq!(rotate_point( -1687,   -962, 0xB5F7), (  -521,   1871));
        assert_eq!(rotate_point(  8151, -22629, 0xCF3B), (-18108, -15832));
        assert_eq!(rotate_point(-23849, -15727, 0x1D20), ( -7703, -27509));
        assert_eq!(rotate_point(-16782, -14328, 0x3B1A), ( 12194, -18390));
        assert_eq!(rotate_point(  9933,  13642, 0x5A0B), (-16874,   -149));
        assert_eq!(rotate_point( 22517, -25205, 0x149C), ( 31896, -11175));
        assert_eq!(rotate_point(-29253, -21275, 0x316A), (  9642,  30675));
        assert_eq!(rotate_point( 28550, -15865, 0xCB0D), ( -7678, -31748));
        assert_eq!(rotate_point( -5481,  -5468, 0x294C), (  1733,  -7546));
        assert_eq!(rotate_point( 31670,  -6191, 0x4816), (  -158,  32268));
        assert_eq!(rotate_point(-27781,   1621, 0xBF79), (  2005,  27756));
        assert_eq!(rotate_point( 10917,   9008, 0x54AB), (-13173,   5179));
        assert_eq!(rotate_point( 13197, -20797, 0xB130), (-24133,  -4939));
        assert_eq!(rotate_point(-24313, -23085, 0xB420), (-15127,  29922));
        assert_eq!(rotate_point(-12909,   2644, 0xEBD9), (-10099,   8463));
        assert_eq!(rotate_point( 13085,  -8737, 0xA17B), (-15314,  -3617));
        assert_eq!(rotate_point(-31023,  22077, 0x8F58), (-28574,  -9150));
        assert_eq!(rotate_point(-29246,  27153, 0x549D), ( -9625,  26806));
        assert_eq!(rotate_point( -1730, -30631, 0x8065), (  1447,  30646));
    }
}